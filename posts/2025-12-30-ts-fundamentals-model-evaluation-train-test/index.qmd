---
title: "Model Evaluation: Train Test Splits"
description: "Analyzing how your forecast performs on unseen data"
author: "Mike Tokic"
date: "2025-08-30"
categories: [machine-learning, time-series]
image: "image.png"
draft: True
---

*This post is part of the [model evaluation chapter](https://mftokic.github.io/posts/2025-05-13-ts-fundamentals-model-evaluation/) within a larger learning series around time series forecasting fundamentals. [Check out the main learning path](https://mftokic.github.io/posts/2024-09-25-ts-fundamentals/) to see other posts in the series.* 

*The example monthly data used in this series [can be found here.](https://github.com/mftokic/mftokic.github.io/blob/main/posts/2024-10-02-ts-fundamentals-whats-a-time-series/example_ts_data.csv) You can also find the [python code used in this post here.](https://github.com/mftokic/mftokic.github.io/blob/main/notebooks/2025-05-30-ts-fundamentals-model-evaluation-train-test-split.ipynb)*

### Building Trust In The Forecast

Let's say your companies CFO is asking you, the hotshot data & AI person, to produce a revenue forecast for the next 12 months. The CFO needs this forecast to communicate expectations to wall street, help optimize product inventory, and make future capital allocation decisions based on where the business is headed the next year. You take a model like ARIMA off the shelf and produce that 12 month forecast, shown below using a time series from our example dataset. Let's take a look. 

![](./chart1.png)

The future 12 month forecast seems to capture the seasonality from month to month, and even the upward trend. You show the results to the CFO, even calling out the 95% prediction interval, which shows the upper of lower bounds with 95% certainty that the future revenue values are likely to fall in between. The CFO looks at it for one second, then says "so what, I can't use this forecast. How do I know it's accurate, this is a black box". You're hopes and dreams, including that potential promotion, are now crushed. Congrats, you learned one of your first hard lessons in the forecast game. **Building trust in the forecast is harder than creating one in the first place.** It might take seconds to train an ARIMA model, but convincing people to use it might take years. 

Hang on a second, you just remembered in our chapter covering [univariate models](https://mftokic.github.io/posts/2025-03-24-ts-fundamentals-univariate-models/) that there is this thing called a residual, which allows you to see historical forecasts compared to actual values on the training data. Maybe residuals can help your CFO build trust in the forecast? 

### Residuals

> Residual = Actual Value - Forecast Value

Let's calculate the residuals for the ARIMA model we trained and plot them on some nice charts using different residual analysis techniques. 

#### Forecast vs Actual Plot

![](./chart2.png)

Overall it looks like the residuals look ok. The historical forecast closely tracks the actual value in most months. There are some months where we can see a large residual, shown by a big gap between the two lines.

#### Residuals Over Time Plot

![](./chart3.png)

Now we can see the actual residual across each historical period. Some are positive, where we underforecast, and some are negative, where we overforecast. **Ideally residuals hang around zero on average. This means the residuals are truly white noise aka random. If they are not white noise and clustering around zero, this means there is potential for more predictive insights to be learned in the data.**

#### Histogram of Residuals

![](./chart4.png)

A histogram is one of the oldest ways to chart data. This chart creates buckets that a value can fall between on the x axis, then on the y axis shows how many times a value falls in that bucket. Choosing the amount of buckets or "bins" is up to the chart creator. Usually you want the histogram to look like a normal distribution centered about zero. This means most of the residuals are close to zero and there is an equal share of residuals above zero as below zero. In our histogram the residuals are mostly centered around zero, which is good, but it looks like we have more positive residuals than negative. This means on average our model underforecasted the target variable. A helpful insight to have when sharing the results with business partners!

#### Q-Q Residual Plot

![](./chart5.png)

Another interesting way to look at residuals is by plotting them in a different graph with the forecast on one axis and the historical actual values on the other. A perfect forecast would follow a straight diagonal line on the chart, since the forecast would match the actual target value. Any values above the line is the model overforecasting, and any values below the line is the model underforecasting. This chart is helpful because you can see the performance for the smallest values in the bottom left all the way to the largest values in the top right. It also makes it easy to spot any potential outlier forecasts. 

#### ACF of Residuals

![](./chart6.png)

The last chart we will showcase is creating an ACF chart on the residuals. If you think back to a [previous post on autocorrelation](https://mftokic.github.io/posts/2024-11-12-ts-fundamentals-autocorrelation/), an ACF chart shows the correlation of a variable with lagged versions of itself. For example showing the correlation of revenue today with revenue from 6 months ago. The ACF chart of our residuals looks good. All of the lagged correlations are below the threshold of being significant, meaning they are within the blue shaded region. If we had lags outside of the blue shaded region, it might show that there was still important information in the historical data not being picked up by our model.  

### Train vs Test Data

Now we know all about residuals and all of the fun ways we can interpret them. Are you going to show these plots to your boss? Not so fast! Understanding the residuals in your trained model is a good idea when training the model, but using residuals to show the performance of the model to others is not a good idea. Analyzing the accuracy of the residuals is kind of like having your model take an open note test. It already has the answers to each question, so usually it will score really well. It's not a good representation of the real world. Instead you want to make sure your model can generalize well to new and unseen data. 

To do that we have to take some of the historical data and hide it from the model. This means splitting your data into two sets. An initial training set of data that's used to, you guessed it, train the model. Then a second testing data set that we'll use to compare the predictions of the model to. Having this hold out testing data is crucial to understand if our model can actually create strong predictions on data it's never seen before. 

When splitting the data into train and test sets, you need to do it carefully. In most machine learning problems, you can split the data randomly and be just fine. But in the world of time series this is a cardinal sin. Because the data is ordered by time, it has to be split by time. Let's see a quick example of splitting the data randomly. 

insert chart. 

Then talk about why this is wrong and the right way to do it. 

insert correct train/test split chart.

### Final Thoughts

### Learn More