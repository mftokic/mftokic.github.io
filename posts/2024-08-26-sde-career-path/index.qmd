---
title: "My Path from Finance Intern to Senior Software Engineer at Microsoft"
description: "How I transitioned into a technical engineering role with zero coding knowledge"
author: "Mike Tokic"
date: "2024-08-26"
categories: [life, finance, career]
image: "image.png"
draft: true
---

![](./image.png)

I have previously written about my journey in [Microsoft's Finance Rotation Program (FRP)](https://mftokic.github.io/posts/2024-02-19-frp-journey/). That details the first half of my career and how I got my first engineering job, but not what I do today. Today I'm a senior software engineer. Most of my time is spent on building and operating machine learning systems used by others across the finance organization. When I came to Microsoft as an intern in 2015 I couldn't write one line of code. But over the years I worked at it and now write code every day. It's been a hard journey, but also a fun one. If you are like me and are interested in making the switch, here are some pieces of advice that might help you. Like all advice, take it with a grain of salt. Advice is like getting last years winning lottery numbers. They might have worked for that person in the past, but it may not work for you. Anyways I hope you find it helpful. 

### Focus on Slope over Intercept

When I came back as a full time employee after my internship, I kept seeing these new signs everywhere talking about something called a ["growth mindset"](https://hbr.org/2016/01/what-having-a-growth-mindset-actually-means). During my internship these words were never mentioned, now they are taped to every blank wall on campus. What's going on? Microsoft's CEO, Satya Nadella, was in the midst of working on a culture shift at the company. Trying to go from employees that were "know it alls" to a more improved "learn it all". This new attitude was perfect for me because I knew jack squat about coding, and I wanted to learn. 

If you want to pivot your career into software engineering, there are two ways to go about it. The first and most common is to go to school and get a degree. The second is to figure it out on your own, aka the learn it yourself path. Both paths have their pros and cons. Going to school is the more direct path, but self-learning may have a different kind of benefit. If you've only ever learned how to code on your own, then you are setting yourself up for lifelong learning. As opposed to someone who went to school, who is used to classroom learning. The learning never stops once you start coding for money, so have the skill to learn proactively and not on a predetermined schedule is a super power. 

Having technical knowledge from school puts you ahead of someone else who is just starting to learn on their own. But if that self-taught person is learning at a pace higher than the school smart person, eventually their trajectories will cross and the self-taught coder will surpass them. Think of it like a graph. Where school knowledge gives you a high Y intercept, a good starting point, but the rate of your learning every day after is the slope. The most important thing is to focus on the slope over the intercept.  

![](./image2.png)

The learning never stops. In fact it only get's harder. Not the learning itself (maybe it does), but taking the time to learn. Build the habit now, stay curious. The biggest trap is getting into the mindset of "I'll start learning new things again once current xyz thing cools down". That thing might be a new job, getting married, having a kid. As your responsibilities grow in life, your free time shrinks in proportion. Make sure learning stays a priority.

A good way to learn on your own while having an existing job is to make the learning part of your job. If you want to learn more about AI technology, go tell your boss that you want to work on a project with AI that could help the team. I'm 100% positive you're boss will say yes. Getting free engineering help is usually not turned down by anyone. We all need better software in our lives. Once your boss expects you to deliver on something, with a deadline, then that's the healthy pressure needed to go out and learn the damn thing. In addition to signing up for project work you can also do the same for traditional learning through books, courses, and certifications. For me back in the day I told my boss I was going to finish a Microsoft sponsored course in data science by xyz date. Each month I would provide her updates on my progress and finishing that course become one of my deliverables in my job. That allowed me to spend some time each day at work on learning, without feeling guilty because it was actually part of my job to learn. Make it part of your job and things become a lot easier. Compared to squeezing in a few minutes before or after work without telling anyone. If your upcoming performance review is tied to reading a few books and building a new thing for your team, you will have all the motivation you need to get it done. 

Last thing I'll say about learning is that I've seen too many people get a masters in data analytics, AI, computer science, etc. only to get a job post-school that does none of that. It's a shame. Don't settle. Don't give up. Keep learning. 

### Real Coders Ship

Real coders ship. They don't just take classes and read books. My learning only started when I put the books down and started pulling real data and training real models. Shipping 10 projects is more impressive than acing 10 classes. 

Real work over building a "portfolio". Real work is messy, and is the best indicator of future performance to an employer. Projects to add to a portfolio allow you to control all the variables, which is not how the real world works. 

### AI is Your Friend

Learning partner, coding buddy. 

### Use Your Competitive Advantage

Business domain knowledge combined with technical knowledge is a deadly combination. So is being able to communicate complex things in simple terms. The midwit meme, where forecast accuracy improved is better than explaining all the new models and techniques you implemented. 

### Baby Steps, Not One Giant Leap

Right time, right place, right people.  

Crawl, walk, then run with new technology. Get it working on your computer. Then move it up into the cloud. Then build a production ready system. Those steps can take years. That's ok. 

Go from business partner, to program manager, to software engineer is a lot easier than skipping directly to software engineer. 

### Getting Promoted

You get promoted when what you build has impact. Not just for building cool or complex things. Most impact with technology can boil down to time savings, money savings, and being more precise, increasing revenue or profitability. You work needs to boil down to numbers. Not what you shipped but what happened after you shipped it. What get's measured gets managed. What gets measured gets promoted. Training a deep learning model is cool but shipping a simple linear regression in half the time might get you promoted twice as fast. Everyone is in sales. Once you build it, you have to sell it. If you can build and sell, you will be unstoppable. Ask your boss what you need to do this year to get promoted, then do those things. Ruthlessly prioritize and execute. Ignore everything else. 

### Final Thoughts

Why learning to code is important. Life is all about leverage. Knowing code gives you the most leverage over any other form (all except content). Most people want to be managers. Pretty soon everyone will be one, just not managing people. But instead managing AI people, or bots, who will do your work for you.

It takes balls to move to a new field. People who just do what their boss tells them to do will never have the guts to do it. It takes a certain amount of agency to do it. 