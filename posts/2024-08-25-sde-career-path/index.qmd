---
title: "My Path from Finance Intern to Senior Software Engineer at Microsoft"
description: "How I transitioned into a technical engineering role with zero coding knowledge"
author: "Mike Tokic"
date: "2024-08-15"
categories: [life, finance, career]
image: "image.png"
draft: true
---

![](./image.png)


Connect the [FRP journey](https://mftokic.github.io/posts/2024-02-19-frp-journey/) to this article. 

Two paths to follow. School smarts vs street smarts. School smarts gets you hired for your first job. Everything after is street smarts. Or experience. Street smarts allows you to skip the line of people with school smarts and go through the third door. Doing leet coding is what everyone else does. I've seen too many people get a masters in analytics, AI, CS, etc only to get a job that does none of that. It's a shame. Don't settle. Don't give up. Shipping 10 projects is more impressive than acing 10 classes. 

Real coders ship. They don't just take classes and read books. My learning only started when I put the books down and started pulling real data and training real models. 

Real work over building a "portfolio". Real work is messy, and is the best indicator of future performance to an employer. Projects to add to a portfolio allow you to control all the variables, which is not how the real world works. 

Right time, right place, right people. 

Why learning to code is important. Life is all about leverage. Knowing code gives you the most leverage over any other form (all except content). Most people want to be managers. Pretty soon everyone will be one, just not managing people. But instead managing AI people, or bots, who will do your work for you. 

It takes balls to move to a new field. People who just do what their boss tells them to do will never have the guts to do it. It takes a certain amount of agency to do it. 

Crawl, walk, then run with new technology. Get it working on your computer. Then move it up into the cloud. Then build a production ready system. Those steps can take years. That's ok. 

Go from business partner, to program manager, to software engineer is a lot easier than skipping directly to software engineer. 

You get promoted when what you build has impact. Not just for building cool or complex things. Most impact with technology can boil down to time savings, money savings, and being more precise, increasing revenue or profitability. You work needs to boil down to numbers. Not what you shipped but what happened after you shipped it. What get's measured gets managed. What gets measured gets promoted. Training a deep learning model is cool but shipping a simple linear regression in half the time might get you promoted twice as fast. Everyone is in sales. Once you build it, you have to sell it. If you can build and sell, you will be unstoppable. Ask your boss what you need to do this year to get promoted, then do those things. Ruthlessly prioritize and execute. Ignore everything else. 

Business domain knowledge combined with technical knowledge is a deadly combination. So is being able to communicate complex things in simple tools. The midwit meme, where forecast accuracy improved is better than explaining all the new models and techniques you implemented. 

The learning never stops. In fact it only get's harder. Not the learning itself (maybe it does), but taking the time to learn. Build the habit now, stay curious.  